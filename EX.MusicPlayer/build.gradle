/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Administrator' at '16. 9. 21 오후 4:43' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 *
 * Reference Site 
 * 
 * http://netframework.tistory.com/entry/gradle%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-Spring-MVC-Web-Application-Spring-Data-JPA-QueryDSL
 * http://huskdoll.tistory.com/8
 * http://hangaebal.blogspot.kr/2014/06/spring-eclipse-gradle.html
 *
 * https://github.com/bmuschko/gradle-tomcat-plugin
 * https://github.com/bmuschko/gradle-cargo-plugin
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'


//
group = 'JavaApplication'
version = '1.0.0'
description = 'Java Application'
defaultTasks = ['clean', 'build' /*, 'distZip', 'installApp' */ ]



// JAVA Version 1.8
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

// 소스 인코딩 UTF-8로 지정
[compileJava, compileTestJava]*.options.collect {options ->
    options.encoding = 'UTF-8'
    options.debug = true
    options.deprecation = true
    options.compilerArgs.add '-Xlint'
    options.compilerArgs.add '-Xlint:-unchecked'
    options.compilerArgs.add '-Xlint:-serial'
    options.compilerArgs.add '-Xlint:-rawtypes'
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // 수동으로 라이브러리 추가
    compile fileTree(dir: 'lib', include:['*.jar'])

    // log 라이브러리
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    compile 'log4j:log4j:1.2.17'
    compile 'com.googlecode.log4jdbc:log4jdbc:1.2'

    // spring 라이브러리
    compile 'org.springframework:spring-context:4.1.6.RELEASE'

    // mysql 라이브러리
    //compile 'mysql:mysql-connector-java:5.1.38'
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.41'
    // mybatis 라이브러리
    compile 'org.mybatis:mybatis:3.2.8'
    compile 'org.mybatis:mybatis-spring:1.2.2'   
    
    //    
    //compile 'commons-collections:commons-collections:3.3'
    compile 'commons-beanutils:commons-beanutils:1.9.2'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'



   // compile 'org.apache.commons:commons-lang3:3.4'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
    compile 'commons-codec:commons-codec:1.10'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3


    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'


    //
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:21.0.2'

    compile 'com.jpardogo.materialtabstrip:library:1.0.6'

    compile files('libs/gson-2.2.4.jar')


}


// main java 소스셋의 디렉토리 추가
sourceSets {
    main {
        java.srcDirs      = ['src/main/java'     ]
        resources.srcDirs = ['src/main/resources']
    }
}


// TEST 설정
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    // testReport = false

    systemProperties 'property': 'value'

    testLogging {
        events 'started', 'passed'
    }
}

task taskClean << {
    println 'Default Cleaning!'
    //commandLine 'cmd', '/c', 'gradle clean'
}

task taskBuild << {
    println 'Default Building!'
    //commandLine 'cmd', '/c', 'gradle build'
}

task taskRun << {
    println 'Default Running!'
}

task taskCopy(type: Copy) {
}

task compile << {
    println 'task compile'
}

task compileTest(dependsOn: compile) << {
    println 'compile test'
}

task runningTest(dependsOn: compileTest) << {
    println 'running test'
}
task dist(dependsOn:[runningTest, compileTest, compile]) << {
    println 'running distribution job'
}

//
clean {
    // dependsOn taskClean


}

// compileJava task에 dependency를 걸어줍니다.
compileJava {
    // dependsOn taskBuild
    dependsOn taskCopy

    // compile target에 generated된 QClass들의 위치를 추가.
    //source sourceSets.generated.java.srcDirs.iterator().next()
}

assemble {
    //dependsOn taskCopy
}

/*
idea {
    module {
        sourceDirs += file('src/main/java')
    }
}
*/





jar {
    archiveName = "JavaApplication.jar"

    // manifest.mf 만들고 속성 추가
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart'
        attributes 'Implementation-Version': version
        attributes "Main-Class" : 'JavaApplication.Main'
    }

    //exclude 'log4j.properties'
    //exclude 'jdbc.properties'
}

// JAVA Application
startScripts {

    mainClassName = "JavaApplication.Main"
    applicationName = "companymakecron"
    outputDir = new File(project.buildDir, 'scripts')

    doLast {

        //def unixScriptFile     = file getUnixScript()
        //unixScript.text        = unixScript.text.replace    ('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Xms256m -Xmx1024m -Dfile.encoding=utf-8"')
        //unixScriptFile.text    = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')

        //def windowsScriptFile = file getWindowsScript()
        //windowsScriptFile.text = windowsScriptFile.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-Xms256m -Xmx1024m -Dfile.encoding=utf-8"')
        //windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\lib\config', '%APP_HOME%\config')
    }
}
